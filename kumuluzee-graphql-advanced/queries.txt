query StudentsNormal {
  allStudents(pagination: {offset: 0, limit: 10}, sort: {fields: [{field: "studentNumber", order: ASC}]}, filter: {fields: [{op: NIN, value: "[Harry]", field: "name"}]}) {
    result {
      ...studentFields
      subjects {
        name
        classroom
      }
    }
    pagination {
      offset
      limit
      total
    }
  }
}

query StudentsJPA {
  allStudentsJPA(pagination: {offset: 0, limit: 10}, sort: {fields: [{field: "studentNumber", order: ASC}]}, filter: {fields: [{op: NIN, value: "[Harry]", field: "name"}]}) {
    ... on PaginationWrapper_Student {
      result {
        name
      }
    }
    result {
      ...studentFields
      ... on Student {
        enrolled
      }
      subjects {
        name
        classroom
      }
    }
    pagination {
      offset
      limit
      total
    }
  }
}

fragment studentFields on Student {
  studentNumber
  surname
}

query LecturersPaginationWithoutMetadata {
  allLecturers(pagination: {offset: 0, limit: 5}, sort: {fields: [{field: "assistant.popularity", order: DESC}, {field: "surname", order: ASC}]}) {
    name
    surname
    assistant {
      name
      surname
      popularity
    }
  }
}

query LecturersManually {
  allLecturersManullyPagination(pagination: {offset: 0, limit: 4}) {
    result {
      name
      status
    }
    pagination {
      offset
      limit
      total
    }
  }
}

query Subjects {
  allSubjects(filter: {fields: [{op: LIKE, field: "classroom", value: "P.*"}]}) {
    result {
      id
      name
      classroom
    }
    pagination {
      offset
      limit
      total
    }
  }
}

query Assistants {
  allAssistants {
    name
    surname
    ... on Assistant {
      popularity
    }
  }
}

query StudentByIndex {
  studentByIndex(index: 2) {
    enrolled
  }
}

mutation AddStudent {
  addStudent(student: {studentNumber: 63170003, name: "Test", surname: "Test"}) {
    name
  }
}

mutation AddStudentVariable($st: StudentInput) {
  addStudent(student: $st) {
    studentNumber
    name
    surname
  }
}

mutation AddSubject {
  addSubject(subject: {name: "Learning JavaEE", classroom: "P1"}) {
    id
    name
    classroom
  }
}

mutation AssignSubjectToStudent {
  assignSubject(studentNumber: 63170005, subjectId: 3) {
    code
    message
  }
}


//query variables
{
  "st": {
    "studentNumber": 63170004,
    "name": "Latest",
    "surname": "Greatest"
  }
}